class Solution {
    public static int aggressiveCows(int[] stalls, int k) {
        if (stalls.length < k) return -1;
        
        Arrays.sort(stalls);
        int start = 1;
        int end = stalls[stalls.length - 1] - stalls[0];
        int ans = -1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            
            if (isAllocationPossible(stalls, mid, k)) {
                ans = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        return ans;
    }
    
    public static boolean isAllocationPossible(int[] stalls, int minDistance, int k) {
        int cowsCount = 1;
        int lastCowsPosition = stalls[0];
        
        for (int i = 1; i < stalls.length; i++) {
            if (stalls[i] - lastCowsPosition >= minDistance) {
                cowsCount++;
                lastCowsPosition = stalls[i];
            }
            
            if (cowsCount >= k) return true;
        }
        return false;
    }

}



You are given an array with unique elements of stalls[], which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. Your task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples :

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, which also is the largest among all possible ways.
